
import FileSystemConfig from "./FileSystemConfig";
import BBComAPIData from "./BBComAPIData";
import BLEIDs from "./BLEIDs";
import BLEBoardData from "./BLEBoardData";


var bEmptyUserPrefs = {
	isDevilsHand: false,
};

var bEmptyMediaState = {
	peripheral: {
		name: "loading...",
		id: "12345",
		connected: false,
	},
	audio: {
		channelNo: 0,
		maxChannel: 0,
		volume: 0,
		channels: ["loading..."]
	},
	video: {
		channelNo: 0,
		maxChannel: 0,
		channels: ["loading..."]
	},
	device: {
		deviceNo: 0,
		maxDevice: 0,
		devices: [{ deviceNo: 0, deviceInfo: "loading...", deviceLabel: "loading...", isPaired: false, }]
	},
	battery: 0,
	audioMaster: 0,
	APKUpdateDate: 0,
	APKVersion: 0,
	region: {
		latitude: 37.78825,
		longitude: -122.4324,
		latitudeDelta: 0.0922,
		longitudeDelta: 0.0922,
		hasBeenAutoGenerated: false,
	},
	locations: [],
	apiLocations: [],
	isError: false,
	logLines: [{ logLine: "", isError: false }],
	boards: [{ name: "none", address: 1234 }],
};

exports.blankUserPrefs = function () {
	return JSON.parse(JSON.stringify(bEmptyUserPrefs));
};

function mblankUserPrefs() {
	return JSON.parse(JSON.stringify(bEmptyUserPrefs));
}

exports.blankMediaState = function () {
	return JSON.parse(JSON.stringify(bEmptyMediaState));
};

function mblankMediaState() {
	return JSON.parse(JSON.stringify(bEmptyMediaState));
}

exports.createMediaState = async function (peripheral) {
	try {
		var mediaState = mblankMediaState();
		mediaState.peripheral = peripheral;

		mediaState = BLEIDs.BLELogger(mediaState, "StateBuilder: Getting BLE Data for " + peripheral.name, false);
		mediaState = await BLEBoardData.refreshMediaState(mediaState);

		mediaState = BLEIDs.BLELogger(mediaState, "StateBuilder: Gettig Boards Data from API ", false);
		mediaState = getBoardsInternal(mediaState); // don't wait!

		return mediaState;
	}
	catch (error) {
		console.log("StateBuilder: " + BLEIDs.fixErrorMessage(error));
	}
};

async function getBoardsInternal(mediaState) {
	try {
		var boards = await module.exports.getBoards();
		mediaState.boards = boards;
	}
	catch (error) {
		console.log("SB: " + error);
	}
	return mediaState;
}

exports.getBoards = async function () {
	try {
		var boards = await BBComAPIData.fetchBoards();

		if (boards) {
			await FileSystemConfig.setBoards(boards);
		}
		else {
			boards = await FileSystemConfig.getBoards();
		}
	}
	catch (error) {
		console.log(error);
	}
	return boards;
};

exports.getUserPrefs = async function () {
	try {
		var userPrefs = await FileSystemConfig.getUserPrefs();

		if (userPrefs) {
			return userPrefs;
		}
		else {
			return mblankUserPrefs();
		}
	}
	catch (error) {
		console.log("StateBuilder: " + error);
	}
};

exports.setUserPrefs = async function (userPrefs) {
	return await FileSystemConfig.setUserPrefs(userPrefs);
};

exports.getLocations = function (mediaState, showAPILocations) {

	if (showAPILocations) {
		var locations = [...mediaState.locations, ...mediaState.apiLocations];
		var afterLocations = Array();
		var currentBoard;
		var existingBoard;
 
		for (var i = 0; i < locations.length; i++) {
			currentBoard = locations[i];

			// if it  exists
			existingBoard = afterLocations.filter((item) => {
				return currentBoard.boardId == item.boardId;
			});

			if(existingBoard[0]) {
				if(existingBoard.dateTime < currentBoard.dateTime){
					// remove it and add the new one
					afterLocations = afterLocations.filter((board) => {
						return board.boardId != existingBoard[0].boardId;
					});
					afterLocations.push(currentBoard);
				}
			}
			else {
				// add it
				afterLocations.push(currentBoard);
			}
		}
		return afterLocations;
	}
	else {
		return mediaState.locations;
	}
};
